//
//  TerrainGenerator.fragmentshader
//  Tutorials
//
//  Created by Fabian Achammer on 10.12.15.
//
//

#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

uniform mat4 MV;
uniform mat4 V;
uniform vec3 LightPosition_worldspace;

void main() {
    // Light emission properties
    // You probably want to put them as uniforms
    vec3 LightColor = vec3(1,1,1);
    float LightPower = 500000.0f;
    
    // Material properties
    vec3 MaterialDiffuseColor = vec3(0, 1, 0);
    vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
    
    vec3 position_cameraspace = (V * vec4(Position_worldspace, 1.0)).xyz;
    
    // Distance to the light
    float distance = length( LightPosition_worldspace - Position_worldspace );
    LightPower /= distance * distance;
    
    vec3 n = normalize( Normal_cameraspace );
    vec3 l = normalize( LightDirection_cameraspace );
    float ndotL = clamp( dot( n,l ), 0,1 );

    vec3 diffuseLight = LightPower *  MaterialDiffuseColor * ndotL;

    color.rgb = MaterialAmbientColor + diffuseLight;
    color.a = 1;
}

